import os
import numpy as np
from PIL import Image
from keras.preprocessing import image
from tensorflow.keras.models import load_model
from keras.models import Model
from keras.applications.vgg16 import preprocess_input
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import img_to_array

loaded_model = load_model('vgg16_malware_classification_model.h5')

dir = '.'
directory = os.fsencode(dir)

def convert_file_bytes_to_image(file_path):
  with open(file_path, 'rb') as file:
    byte_array = file.read()

  pixel_values = np.frombuffer(byte_array, dtype=np.uint8)

  #print(pixel_values)
    
    # Calculate the size of the image
  image_size = int(np.ceil(np.sqrt(len(pixel_values))))
  if len(pixel_values) < image_size * image_size:
    pixel_values = np.pad(pixel_values, (0, image_size * image_size - len(pixel_values)), 'constant', constant_values=0)
  
  #print(pixel_values)
   
  grayscale_image = pixel_values.reshape((image_size, image_size))
  rgb_image = np.stack((grayscale_image,) * 3, axis=-1)
  image = Image.fromarray(rgb_image).resize((224, 224))

  if image.mode != 'RGB':
        image = image.convert('RGB')
  
  #plt.imshow(image)
  #plt.axis('off')  # Hide axis
  #plt.show()
  
  return image


def print_prediction(file_path):
  converted_image = convert_file_bytes_to_image(file_path)

  image_array = img_to_array(converted_image)
  image_array = np.expand_dims(image_array, axis=0)
  preprocessed_image = preprocess_input(image_array)


  # Make predictions
  predictions = loaded_model.predict(preprocessed_image)

  prediction = predictions[0][0]  # Since it's binary, predictions[0] gives [probability_class_0, probability_class_1]

  #print(predictions)

  if prediction > 0.5:
      print("Predicted class: 1 (Malware)")
  else:
      print("Predicted class: 0 (Not Malware)")

    
for file in os.listdir(directory):
    filename = os.fsdecode(file)
    file_path = os.path.join(directory, file)
    if os.path.isdir(file_path):
      #print(filename+' is directory, skipping')
      continue
    elif filename.endswith(".h5") or filename.endswith(".py"): 
        #print(filename)
        continue
    elif filename.endswith('.config') or filename.endswith('sample_data'):
      #print(filename)
      continue
    else:
        print('testing file: '+filename)
        print_prediction('./'+filename)
        continue